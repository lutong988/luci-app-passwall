#!/bin/bash /etc/rc.common

START=99
STOP=99

module_list="
  ipt2socks
  tcproute2
  smartdns
"
ipv4_lan="
  0.0.0.0/8
  10.0.0.0/8
  100.64.0.0/10
  127.0.0.0/8
  169.254.0.0/16
  172.16.0.0/12
  192.0.0.0/24
  192.0.2.0/24
  192.88.99.0/24
  192.168.0.0/16
  198.18.0.0/15
  198.51.100.0/24
  203.0.113.0/24
  224.0.0.0/4
  240.0.0.0/4
  255.255.255.255/32
"

if [ -s /etc/config/passwall ]; then
  switch=$(uci get passwall.@global[0].switch)
  port=$(uci get passwall.@global[0].port)
  ports=$(uci get passwall.@global[0].ports)
  cores=$(cat /proc/cpuinfo|grep processor|wc -l)
fi

for i in $module_list; do
  type $i 2> /dev/null
  [ $? -eq 127 ]&&exit $?
  [ ! -x /usr/bin/$i ]&&chmod +x /usr/bin/$i
done

tcp2_w()(
  cat >/tmp/TcpRoute2.toml<<EOF
addr="127.0.0.1:1025"
PreHttpPorts=[${port//\ /,}]
PreHttpsPorts=[${ports//\ /,}]
EOF
  i=0
  while true; do
    uci get passwall.@proxy[$i] >/dev/null 2>&1||break
    name=$(uci get passwall.@proxy[$i].name)
    proxyurl=$(uci get passwall.@proxy[$i].proxy)
    address=$(uci get passwall.@proxy[$i].address)
    port=$(uci get passwall.@proxy[$i].port)
    user=$(uci get passwall.@proxy[$i].user)
    pass=$(uci get passwall.@proxy[$i].password)
    dns=$(uci get passwall.@proxy[$i].resolve)
    block=$(uci get passwall.@proxy[$i].block)
    sleep=$(uci get passwall.@proxy[$i].sleep)
    delay=$(uci get passwall.@proxy[$i].delay)
    white=$(uci get passwall.@proxy[$i].white)
    filename=$(date +%s) #date +%s | sha256sum | base64 | head -c 32 ; echo
    if [ "$proxyurl" -a "$address" -a "$port" ]; then
      if [ "$user" -a "$pass" ]; then
        server="$user:$pass@$address:$port"
      else
        server="$address:$port"
      fi
      [ "$dns" ]&&dns="true"||dns="false"
      [ "$name" ]&&filename="$name"
      [ -z "$sleep" ]&&sleep=0
      [ -z "$delay" ]&&delay=0
      cat >>/tmp/TcpRoute2.toml<<EOF
[[UpStreams]]
Name="$name"
ProxyUrl="$proxyurl://$server"
DnsResolve=$dns
Sleep=$sleep
CorrectDelay=$delay
EOF
      if [ "$white" ]; then
        cat >>/tmp/TcpRoute2.toml<<EOF
[[UpStreams.Whitelist]]
Path="/tmp/$filename.txt"
UpdateInterval="24h"
Type="suffix"
EOF
        if [ -s /tmp/$filename.txt ]; then
          rm -f /tmp/$filename.txt
        fi
        for j in $white ; do
          echo $j >>/tmp/$filename.txt
        done
      fi
      if [ "$block" ]; then
        cat >>/tmp/TcpRoute2.toml<<EOF
[[UpStreams.Blacklist]]
Path="/tmp/block.txt"
UpdateInterval="24h"
Type="regex"
EOF
        if [ ! -s /tmp/block.txt ]; then
          echo '^.+$' >/tmp/block.txt
        fi
      fi
    fi
    unset -v name proxyurl address port user pass server dns block sleep delay white filename
    ((i++))
  done
)

dns_w()(
  cache=$(uci get passwall.@global[0].cache)
  ipv6=$(uci get passwall.@global[0].ipv6)
  dns=$(uci get passwall.@global[0].server)
  bogus=$(uci get passwall.@global[0].bogus)
  if [ "$dns" ]; then
    [ -z "$cache" ]&&cache=0
    [ -z "$ipv6" ]&&ipv6="yes"||ipv6="no"
    cat >/tmp/smartdns.conf<<EOF
server-name smartdns
bind 127.0.0.1:1053
bind [::1]:1053
tcp-idle-time 15
cache-size $cache
serve-expired yes
serve-expired-ttl 10
speed-check-mode ping,tcp:80,tcp:443
force-AAAA-SOA $ipv6
log-level error
EOF
    for i in $dns ; do
      echo "server $i" >>/tmp/smartdns.conf
    done
    for i in $bogus ; do
      echo "bogus-nxdomain $i" >>/tmp/smartdns.conf
    done
    echo -e "$(cat /etc/black.list)\n"|while IFS= read -r line; do
      [ "$line" ]&&echo "address $line" >>/tmp/smartdns.conf
    done
  fi
)

clear_rules()(
  iptables -t nat -D PREROUTING -j passwall
  iptables -t nat -F passwall
  iptables -t nat -X passwall
) 2> /dev/null

start_up()(
  if [ -n "$switch" ]; then
    (ipt2socks -p 1025 -b 0.0.0.0 -B ::0 -l 1024 -j ${cores:=1} -T -4 -R > /dev/null 2>&1 &)
    tcp2_w
    (tcproute2 -config /tmp/TcpRoute2.toml -daemon > /dev/null 2>&1 &)
    dns_w
    smartdns -c /tmp/smartdns.conf
  else
    shut_down
  fi
)

shut_down()(
  for i in $module_list; do
    kill $(pidof $i) 2> /dev/null
  done
)

ss_nat()(
  [ -z "$port" ]&&pport=${ports//\ /,}
  [ -z "$ports" ]&&pport=${port//\ /,}
  [ "$port" -a "$ports" ]&&pport="${port//\ /,},${ports//\ /,}"
  if [ -n "$switch" -a -n "$pport" ]; then
    ipset create lan hash:net
    if [ $? -eq 0 ]; then
      for i in $ipv4_lan; do
        ipset add lan $i
      done
    fi
    iptables -t nat -N passwall
    iptables -w -t nat -A passwall -m set --match-set lan dst -j ACCEPT
    iptables -w -t nat -A passwall -p tcp -m multiport --dport $pport -j REDIRECT --to-ports 1024
    iptables -w -t nat -A PREROUTING -j passwall
  else
    clear_rules
  fi
);

stop()
{
  clear_rules
  shut_down
}

start()
{
  start_up
  ss_nat
}

restart()
{
  clear_rules
  shut_down
  start_up
  ss_nat
}
