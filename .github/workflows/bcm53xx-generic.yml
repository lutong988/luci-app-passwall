# This is a basic workflow to help you get started with Actions
# 适用于K3路由器其它的可能需要稍微修改编译代码
name: bcm53xx-generic

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  watch:
    types: started

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id
    
    env:
      URL: https://downloads.openwrt.org/snapshots/targets/bcm53xx/generic/openwrt-sdk-bcm53xx-generic_gcc-8.4.0_musl_eabi.Linux-x86_64.tar.xz

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Install dependencies
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion git-core gcc-multilib libelf-dev autoconf automake libtool wget curl
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        cd ${HOME}
        echo "当前目录: ${HOME}"
    
    - name: Install UPX
      run: |
        wget --no-check-certificate --quiet --continue --show-progress https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz
        tar xvJf upx-3.96-amd64_linux.tar.xz
        sudo mv -f upx-3.96-amd64_linux/upx /usr/local/bin
        rm -rf upx-3.96-amd64_linu*
        
    - name: Prepare Golang
      run: |
        #Download Latest Go
        echo "Finding latest version of Go for AMD64..."
        latest_version="$(wget -qO- https://golang.org/dl/|grep 'download downloadBox' | grep -oP '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)"
        [ -z ${latest_version} ]&&exit 127
        echo "Downloading latest Go for AMD64: ${latest_version}"
        wget --quiet --continue --show-progress https://dl.google.com/go/go${latest_version}.linux-amd64.tar.gz
        [ $? -ne 0 ]&&echo "下载Golang工具链失败!"&&exit 127
        sudo tar -C /usr/local -xzf go${latest_version}.linux-amd64.tar.gz
        [ $? -ne 0 ]&&echo "解压Golang工具链失败!"&&exit 127
        rm -f go${latest_version}.linux-amd64.tar.gz
        
    - name: Prepare Toolchain
      run: |
        wget --no-check-certificate --quiet --continue --show-progress ${URL}
        [ $? -ne 0 ]&&echo "下载工具链失败!"&&exit 127
        tar xvJf openwrt-sdk-*.tar.xz
        [ $? -ne 0 ]&&echo "解压工具链失败!"&&exit 127
        rm -f ${URL##*/}

    - name: Build
      run: |
        cores=$(cat /proc/cpuinfo|grep processor|wc -l)
        dirn=$(pwd) #主目录
        dirn1=${URL##*/}
        dirn1=${dirn1%*${dirn1:(-7)}} 
        if [ -d ${dirn1} ]; then
          echo "#工具链解压文件夹 ${dirn1}"
        else
          echo "没有识别工具链解压文件夹!"
          exit 127
        fi
        cd ${dirn1}
        echo "当前目录: ${dirn1}"
        for i in staging_dir/* ;do
          [[ ${i##*/} != "host" ]]&&dirn2=${i##*/}
        done
        if [ ${dirn2} ]; then
          echo "#编译器存放文件夹 ${dirn2}"
        else
          echo "没有识别出编译器存放文件夹!"
          exit 127
        fi
        for i in staging_dir/${dirn2}/bin/*-gcc; do
          target_host=$(echo ${i##*/}|grep -oP "[A-Za-z0-9]+\-[A-Za-z0-9]+\-[A-Za-z0-9]+")
        done
        if [ ${target_host} ]; then
          echo "#编译器平台为 ${target_host}"
        else
          echo "没有识别出编译器!"
          exit 127
        fi
        export PATH=$PATH:/usr/local/go/bin:${dirn}/${dirn1}/staging_dir/${dirn2}/bin
        export STAGING_DIR=${dirn}/${dirn1}
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        [ ! -d feeds/luci/applications ]&&echo "没有找到 feeds/luci/applications 路径!"&&exit 127
        echo "克隆 luci-app-passwall 中..."
        git clone https://github.com/yiguihai/luci-app-passwall feeds/luci/applications/luci-app-passwall
        echo "进入 luci-app-passwall 软件包目录..."
        cd feeds/luci/applications/luci-app-passwall
        echo "更新 luci-app-passwall 的子模块..."
        git submodule update --init --recursive
        echo "编译 po2lmo ..."
        cd tools/po2lmo
        make -j ${cores:=1}
        sudo make install
        make clean
        echo "编译 TcpRoute2 ..."
        cd ../TcpRoute2
        go get -d -v ./...
        env AR="${target_host}-ar" CC="${target_host}-gcc" CXX="${target_host}-gcc++" CGO_ENABLED=1 GO111MODULE=auto GOOS=${target_host##*-} GOARCH=${target_host%%-*} GOARM=5 go build -ldflags "-s -w" -o tcproute2 #编译armv5版本的tcproute2 https://github.com/golang/go/wiki/GoArm 需要修改
        upx --ultra-brute --best -v tcproute2
        mkdir -p ../../root/bin
        mv -f tcproute2 ../../root/bin
        echo "编译 ipt2socks ..."
        cd ../ipt2socks
        make CC=${target_host}-gcc -j ${cores:=1}
        upx --ultra-brute --best -v ipt2socks
        mv -f ipt2socks ../../root/bin
        make clean
        echo "编译 smartdns ..."
        cd ../smartdns
        mkdir -p ${dirn}/ssl
        git clone https://github.com/openssl/openssl
        cd openssl
        git submodule update --init --recursive
        ./Configure \
        no-asm \
        --cross-compile-prefix=${target_host}- \
        --prefix=${dirn}/ssl \
        linux-armv4 #需要修改
        make -j ${cores:=1}
        make install_sw
        make distclean
        #因为make install乱加sudo试错了一天 https://stackoverflow.com/questions/23078282/ranlib-not-found 才解决。555 泪目今晚加鸡腿犒劳自己。
        cd ..
        make CFLAGS="-I ${dirn}/ssl/include" LDFLAGS="-L ${dirn}/ssl/lib" CC="${target_host}-gcc"
        ${target_host}-strip src/smartdns
        upx --ultra-brute --best -v src/smartdns
        mv src/smartdns ../../root/bin
        chmod -R +x ../../root/bin
        ls -l ../../root/bin
        po2lmo ../../luasrc/i18n/passwall.zh-cn.po ../../luasrc/i18n/passwall.zh-cn.lmo
        cp -f ../../.github/workflows/bcm53xx-generic.config ${dirn}/${dirn1}/.config #需要修改
        cd ${dirn}/${dirn1}
        ./scripts/feeds update -a
        ./scripts/feeds install luci-app-passwall
        make defconfig
        make package/luci-app-passwall/compile -j${cores:=1}
        mkdir -p /tmp/bin
        find bin/ -type f -name "*luci-app-passwall*" | xargs -t -i mv -vf {} /tmp/bin
        
    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@master
      with:
        name: luci-app-passwall
        path: /tmp/bin
        
